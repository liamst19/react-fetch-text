import React, { useState, useEffect,  useRef } from "react";import "./component.JapaneseText.css";// Container for single paragraphfunction JpTxtParagraph(props) {  return <p className={props.paragraphType}>{props.text}</p>;}// Container for all paragraphsfunction JpTxtParagraphs(props) {  // Ref -------------------------  const refContainer = useRef();  // Effect Hook ------------------  useEffect(() => {    window.addEventListener('resize', () => {      // Reset height for adjustment      refContainer.current.style.height = 'auto';      // Note: Perhaps it would be best if any other      // elements below would be hidden while final height is set      // Because calculation for scrollHeight seems to take time,      // setting height with a slight delay.      window.setTimeout(()=>                 refContainer.current.style.height = refContainer.current.scrollHeight + 'px', 50);      //  refContainer.current.style.height = elemChildBottom + 'px';    });  },[]);  // Split lines of text and render as paragraphs  return <div ref={ refContainer } className="wrapper">           {             props.text.split('/n').map(               (p, i) => (                 <JpTxtParagraph text={p} key={i}/>               )             )           };         </div>;}function JapaneseText(props) {  // States -----------------------  const [state, setState] = useState({    text: "loading.."  });  // Hooks ------------------------  useEffect(() => {    fetch(process.env.PUBLIC_URL + "/" + props.url)      .then(response => response.json())      .then(data => {        setState(data);        // Call resize event to adjust height of wrapper div        window.dispatchEvent(new Event('resize'));      });  }, [props.url]);  return (    <div className="JapaneseText">      <JpTxtParagraphs text={state.text} />    </div>  );}export default JapaneseText;