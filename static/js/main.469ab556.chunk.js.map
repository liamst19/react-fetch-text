{"version":3,"sources":["component.JapaneseText.js","App.js","serviceWorker.js","index.js"],"names":["JpTxtParagraph","props","paragraphType","text","JpTxtParagraphs","refContainer","useRef","useEffect","window","addEventListener","current","style","height","setTimeout","scrollHeight","split","map","p","i","JapaneseText","useState","state","setState","fetch","process","url","then","response","json","data","dispatchEvent","Event","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAIA,SAASA,EAAeC,GACtB,OAAO,uBAAG,UAAWA,EAAMC,eAAgBD,EAAME,MAInD,SAASC,EAAgBH,GAGvB,IAAMI,EAAeC,mBAqBrB,OAlBAC,qBAAU,WACRC,OAAOC,iBAAiB,UAAU,WAEhCJ,EAAaK,QAAQC,MAAMC,OAAS,OAOpCJ,OAAOK,YAAW,kBACPR,EAAaK,QAAQC,MAAMC,OAASP,EAAaK,QAAQI,aAAe,OAAM,SAI3F,IAGK,yBAAK,IAAMT,EAAe,UAAU,WAEhCJ,EAAME,KAAKY,MAAM,MAAMC,KACrB,SAACC,EAAGC,GAAJ,OACE,kBAAC,EAAD,CAAgB,KAAMD,EAAG,IAAKC,OAJtC,KAoCMC,MAzBf,SAAsBlB,GAAO,MAEDmB,mBAAS,CACjCjB,KAAM,cAHmB,mBAEpBkB,EAFoB,KAEbC,EAFa,KAkB3B,OAXAf,qBAAU,WACRgB,MAAMC,qBAA+BvB,EAAMwB,KACxCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJP,EAASO,GAGTrB,OAAOsB,cAAc,IAAIC,MAAM,gBAElC,CAAC9B,EAAMwB,MAGR,yBAAK,UAAU,gBACb,kBAAC,EAAD,CAAiB,KAAMJ,EAAMlB,SC9CpB6B,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,gDAEF,8BAAO,kBAAC,EAAD,CAAcR,IAAI,kBACzB,4BAAQQ,UAAU,cAChB,4BAAI,yDCAQC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.469ab556.chunk.js","sourcesContent":["import React, { useState, useEffect,  useRef } from \"react\";\rimport \"./component.JapaneseText.css\";\r\r// Container for single paragraph\rfunction JpTxtParagraph(props) {\r  return <p className={props.paragraphType}>{props.text}</p>;\r}\r\r// Container for all paragraphs\rfunction JpTxtParagraphs(props) {\r\r  // Ref -------------------------\r  const refContainer = useRef();\r\r  // Effect Hook ------------------\r  useEffect(() => {\r    window.addEventListener('resize', () => {\r      // Reset height for adjustment\r      refContainer.current.style.height = 'auto';\r\r      // Note: Perhaps it would be best if any other\r      // elements below would be hidden while final height is set\r\r      // Because calculation for scrollHeight seems to take time,\r      // setting height with a slight delay.\r      window.setTimeout(()=>\r                 refContainer.current.style.height = refContainer.current.scrollHeight + 'px', 50);\r\r      //  refContainer.current.style.height = elemChildBottom + 'px';\r    });\r  },[]);\r\r  // Split lines of text and render as paragraphs\r  return <div ref={ refContainer } className=\"wrapper\">\r           {\r             props.text.split('/n').map(\r               (p, i) => (\r                 <JpTxtParagraph text={p} key={i}/>\r               )\r             )\r           };\r         </div>;\r}\r\rfunction JapaneseText(props) {\r  // States -----------------------\r  const [state, setState] = useState({\r    text: \"loading..\"\r  });\r\r  // Hooks ------------------------\r  useEffect(() => {\r    fetch(process.env.PUBLIC_URL + \"/\" + props.url)\r      .then(response => response.json())\r      .then(data => {\r        setState(data);\r\r        // Call resize event to adjust height of wrapper div\r        window.dispatchEvent(new Event('resize'));\r      });\r  }, [props.url]);\r\r  return (\r    <div className=\"JapaneseText\">\r      <JpTxtParagraphs text={state.text} />\r    </div>\r  );\r}\r\rexport default JapaneseText;\r","import React from \"react\";\nimport \"./App.css\";\nimport JapaneseText from \"./component.JapaneseText.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Fetch Text Demo</h1>\n      </header>\n      <main>{<JapaneseText url=\"wagahai.json\" />}</main>\n      <footer className=\"App-footer\">\n        <h2><span>This is the footer.</span></h2>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}