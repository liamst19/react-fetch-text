{"version":3,"sources":["component.JapaneseText.js","serviceWorker.js","index.js"],"names":["JapaneseText","props","useState","text","state","setState","refContainer","useRef","useEffect","fetch","process","url","then","response","json","data","window","dispatchEvent","Event","addEventListener","current","style","height","scrollHeight","ref","className","split","map","p","i","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","App","ReactDOM","render","document","getElementById","URL","href","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oQA+CeA,MA5Cf,SAAsBC,GAAO,MAEDC,mBAAS,CACjCC,KAAM,mCAHmB,mBAEpBC,EAFoB,KAEbC,EAFa,KAOrBC,EAAeC,mBA4BrB,OAzBAC,qBAAU,WAGRC,MAAMC,qBAA+BT,EAAMU,KACxCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJV,EAASU,GAGTC,OAAOC,cAAc,IAAIC,MAAM,cAInCF,OAAOG,iBAAiB,UAAU,WAEhCb,EAAac,QAAQC,MAAMC,OAAS,OAGpChB,EAAac,QAAQC,MAAMC,OACzBhB,EAAac,QAAQG,aAAe,UAIvC,CAACtB,EAAMU,MAGR,yBAAKa,IAAKlB,EAAcmB,UAAU,gBAC/BrB,EAAMD,KAAKuB,MAAM,MAAMC,KAAI,SAACC,EAAGC,GAAJ,OAC1B,2BAAID,QC7BNE,EAAcC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTxB,MAAK,SAAA6B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvC,QACfkC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjE,SAASC,IACP,OACE,yBAAK5B,UAAU,OACb,4BAAQA,UAAU,cAChB,gDAEF,8BAAO,kBAAC,EAAD,CAAcd,IAAI,kBACzB,4BAAQc,UAAU,cAChB,4BACE,wDAOV6B,IAASC,OAAO,kBAACF,EAAD,MAASG,SAASC,eAAe,SDA1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIhD,oBAAwBM,OAAOgB,SAAS2B,MACpDC,SAAW5C,OAAOgB,SAAS4B,OAIvC,OAGF5C,OAAOG,iBAAiB,QAAQ,WAC9B,IAAMiB,EAAK,UAAM1B,oBAAN,sBAEPoB,IAgEV,SAAiCM,EAAOC,GAEtC5B,MAAM2B,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BjD,MAAK,SAAAC,GAEJ,IAAMiD,EAAcjD,EAASgD,QAAQE,IAAI,gBAEnB,MAApBlD,EAASmD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMtD,MAAK,SAAA6B,GACjCA,EAAa0B,aAAavD,MAAK,WAC7BI,OAAOgB,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEAvFAqB,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMtD,MAAK,WACjCmC,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OCvB/BE,K","file":"static/js/main.c1fd0456.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./component.JapaneseText.css\";\n\nfunction JapaneseText(props) {\n  // States -----------------------\n  const [state, setState] = useState({\n    text: \"ロード中…\"\n  });\n\n  // Ref -------------------------\n  const refContainer = useRef();\n\n  // Effect ------------------------\n  useEffect(() => {\n\n    // Fetch text data from an external file\n    fetch(process.env.PUBLIC_URL + \"/\" + props.url)\n      .then(response => response.json())\n      .then(data => {\n        setState(data);\n\n        // Call resize event to adjust height of wrapper div\n        window.dispatchEvent(new Event(\"resize\"));\n      });\n\n    // Event listener for height adjustment upon resizing window\n    window.addEventListener(\"resize\", () => {\n      // Reset height for adjustment\n      refContainer.current.style.height = \"auto\";\n\n      // Set to the calculated height\n      refContainer.current.style.height =\n        refContainer.current.scrollHeight + \"px\";\n\n      //  refContainer.current.style.height = elemChildBottom + 'px';\n    });\n  }, [props.url]);\n\n  return (\n    <div ref={refContainer} className=\"JapaneseText\">\n      {state.text.split(\"/n\").map((p, i) => (\n        <p>{p}</p>\n      ))}\n    </div>\n  );\n}\n\nexport default JapaneseText;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport JapaneseText from \"./component.JapaneseText.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Fetch Text Demo</h1>\n      </header>\n      <main>{<JapaneseText url=\"wagahai.json\" />}</main>\n      <footer className=\"App-footer\">\n        <h2>\n          <span>This is the footer.</span>\n        </h2>\n      </footer>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n// serviceWorker.unregister();\n"],"sourceRoot":""}